package application.SceneControllers;


import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.util.Callback;



import java.io.IOException;


import application.Client;
import application.Ressourcen;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;


public class JoinOnlinePageController {
	private Stage stage;
	private Scene scene;
	private Parent root;
	@FXML
	private TextField pseudoName;
	
	@FXML
	private Label jointNameLabel;
	@FXML
	ImageView warning;
	@FXML
	private TableView<String[]> hostTableView;
	@FXML
	private TableColumn<String[], String> hostsTableColumn;
	@FXML
	private TableColumn<String[], String> roomTableColumn;
	private ObservableList<String[]> data = FXCollections.observableArrayList();
	@FXML
	private Button JOINID;
	@FXML
	private Button REF;
	@FXML
	private Button BackButton;
		
	public void initialize(){
		jointNameLabel.setText(Ressourcen.language.get(16).get(LandingPageController.languageIndex));
		hostsTableColumn.setText(Ressourcen.language.get(18).get(LandingPageController.languageIndex));
		roomTableColumn.setText(Ressourcen.language.get(17).get(LandingPageController.languageIndex));
		JOINID.setText(Ressourcen.language.get(20).get(LandingPageController.languageIndex));
		REF.setText(Ressourcen.language.get(19).get(LandingPageController.languageIndex));
		BackButton.setText(Ressourcen.language.get(8).get(LandingPageController.languageIndex));
		
		FillTableView();		
    }
	// Event Listener on Button[#JOINID].onAction
	
	
	
	
	
	@FXML
	public void JoinButtonOnClick(ActionEvent event) throws IOException {
	    // ueberpruefen ob der Name der Spieler leer oder '-' beinhaltet
			if(validate()==true) {
				
			TablePosition pos = hostTableView.getSelectionModel().getSelectedCells().get(0);
			int row = pos.getRow();
			System.out.println("selected:"+row);
			// Item here is the table view type:
			TableColumn col = pos.getTableColumn();
			// this gives the value in the selected cell:
			
			String hostToJoin = (String) col.getCellObservableValue(hostTableView.getItems().get(row)).getValue();
	
			String msg = "Player-Join-"+hostToJoin+"-"+pseudoName.getText();
			//System.out.println(msg);
	
			Client.playerpseudo=pseudoName.getText();
			Client.roomToJoin=hostToJoin;
			String resp;
			
			resp = Client.accessServer(msg);
			if(resp.equals("Added")) 
			{
				root = FXMLLoader.load(getClass().getResource("/application/Scenes/WaitPage.fxml"));
				stage = (Stage)((Node)event.getSource()).getScene().getWindow();
				scene = new Scene(root);
				stage.setScene(scene);		
				stage.show();
			}
		}
			
	}
	// Event Listener on Button[#REF].onAction
	@FXML
	public void RefreshButtonOnClick(ActionEvent event) {
		// TODO Autogenerated
		FillTableView();	
	}
	// Event Listener on Button[#BackButton].onAction
	@FXML
	public void BackButtonClicked(ActionEvent event) throws IOException {
		// TODO Autogenerated
		root = FXMLLoader.load(getClass().getResource("/application/Scenes/OnlinePage.fxml"));
		stage = (Stage)((Node)event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
	}
	
	
	
	
	
	private void FillTableView() {

		// TODO Autogenerated
		
	 	String msg = "Player-AllHosts";
		String resp;
		resp = Client.accessServer(msg);
		if(resp.equals("NoConnexion")) {
			System.out.println("************* Connexion lost *************");
			Alert alrt = new Alert(Alert.AlertType.WARNING);
			alrt.setTitle("Warning");
			alrt.setHeaderText("No conexion");
			alrt.setContentText("You are not connected to the game server!");
			alrt.showAndWait();
		}else
		{
		String[] hosts = resp.split("-");
		data.clear();
		if(hosts.length %2 == 0) 
		{
			for(int i=0;i<=hosts.length-1;i=i+2) 
			{
				String[] row = new String[2];
				row[0]=hosts[i];
				row[1]=hosts[i+1];
				data.add(row);
			}	
		}
		
		hostsTableColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<String[], String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<String[], String> p) {
                String[] x = p.getValue();
                if (x != null && x.length>0) {
                    return new SimpleStringProperty(x[0]);
                } else {
                    return new SimpleStringProperty("<no name>");
                }
            }
        });

		roomTableColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<String[], String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<String[], String> p) {
                String[] x = p.getValue();
                if (x != null && x.length>1) {
                    return new SimpleStringProperty(x[1]);
                } else {
                    return new SimpleStringProperty("<no value>");
                }
            }
        });
		hostTableView.setItems(data);
		}
	}


	public boolean validate() {
		
		StringBuilder errors = new StringBuilder();
	
	    // Confirm mandatory fields are filled out
	    if (pseudoName.getText().trim().isEmpty()) {
	         errors.append("- Please enter your name.\n");
	    }
	    else if(pseudoName.getText().trim().isEmpty()== false) {
				
					String valid_name = pseudoName.getText();
					CharSequence seq = "-"; 
				    if(valid_name.contains(seq)) {	
				         errors.append("Your name must not contain a minus - sign\n");
				    }
		} 
	    if(hostTableView.getSelectionModel().getSelectedItem() == null) {
				
		         errors.append("No room selected! please select a room\n");
		 }
	    
	    
	    // If any missing information is found, show the error messages and return false
	    if (errors.length() > 0) {
	        Alert alert = new Alert(Alert.AlertType.WARNING);
	        alert.setTitle("Warning");
	        alert.setHeaderText("Required Fields Empty");
	        alert.setContentText(errors.toString());
	        alert.showAndWait();
	            return false;
	     }
	
	    // No errors
	        return true;
	    }

}

