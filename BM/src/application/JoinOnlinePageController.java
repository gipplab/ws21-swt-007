package application;

import java.io.IOException;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.util.Callback;

public class JoinOnlinePageController {
	private Stage stage;
	private Scene scene;
	private Parent root;

    @FXML
    private Button BackButton;

    @FXML
    private Button JOINID;

    @FXML
    private Button REF;

    @FXML
    private TableView<String[]> hostTableView;

    @FXML
    private TableColumn<String[], String> hostsTableColumn;

    @FXML
    private TextField pseudoName;

    @FXML
    private TableColumn<String[], String> roomTableColumn;
    private ObservableList<String[]> data = FXCollections.observableArrayList();
    public void initialize(){		
		FillTableView();
    }
    @FXML
    public void BackButtonClicked(ActionEvent event) throws IOException {
    	
    	root = FXMLLoader.load(getClass().getResource("Scenes/OnlinePage.fxml"));
		stage = (Stage)((Node)event.getSource()).getScene().getWindow();
		scene = new Scene(root);
		stage.setScene(scene);
		stage.show();
    }

    @FXML
    void JoinButtonOnClick(ActionEvent event) throws IOException {
    	// TODO Autogenerated
		 TablePosition pos = hostTableView.getSelectionModel().getSelectedCells().get(0);
		int row = pos.getRow();
		// Item here is the table view type:
		TableColumn col = pos.getTableColumn();
		// this gives the value in the selected cell:
		String hostToJoin = (String) col.getCellObservableValue(hostTableView.getItems().get(row)).getValue();
		String msg = "Player-Join-"+hostToJoin+"-"+pseudoName.getText();
		Client.playerpseudo=pseudoName.getText();
		Client.roomToJoin=hostToJoin;
		String resp;
		resp = Client.accessServer(msg);
		if(resp.equals("Added")) 
		{
			root = FXMLLoader.load(getClass().getResource("WaitPage.fxml"));
			stage = (Stage)((Node)event.getSource()).getScene().getWindow();
			scene = new Scene(root);
			stage.setScene(scene);		
			stage.show();
		}
    	

    }
    private void FillTableView() {
		// TODO Autogenerated
		
	 	String msg = "Player-AllHosts";
		String resp;
		resp = Client.accessServer(msg);
		String[] hosts = resp.split("-");
		data.clear();
		if(hosts.length %2 == 0) 
		{
			for(int i=0;i<=hosts.length-1;i=i+2) 
			{
				String[] row = new String[2];
				row[0]=hosts[i];
				row[1]=hosts[i+1];
				data.add(row);
			}	
		}
		
		hostsTableColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<String[], String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<String[], String> p) {
                String[] x = p.getValue();
                if (x != null && x.length>0) {
                    return new SimpleStringProperty(x[0]);
                } else {
                    return new SimpleStringProperty("<no name>");
                }
            }
        });

		roomTableColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<String[], String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<String[], String> p) {
                String[] x = p.getValue();
                if (x != null && x.length>1) {
                    return new SimpleStringProperty(x[1]);
                } else {
                    return new SimpleStringProperty("<no value>");
                }
            }
        });
		hostTableView.setItems(data);		
	}

    @FXML
    void RefreshButtonOnClick(ActionEvent event) {
    	// TODO Autogenerated
    				FillTableView();
    }

}
